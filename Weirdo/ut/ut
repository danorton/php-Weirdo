#!/usr/bin/php
<?php
/**
 * @addtogroup Weirdo
 *
 * @file
 * @{
 * @copyright
 *   Â© 2014 Daniel Norton d/b/a WeirdoSoft - www.weirdosoft.com
 *
 * @section License
 * **GPL v3**\n
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * \n\n
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * \n\n
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * @}
 */

require_once __DIR__ . "/../Weirdo.php";

/**
 * Perform unit test for Weirdo module.
 */
class Weirdo_ut extends WeirdoCommandLineApp {

	public $parseTestSet = array(
		'google'     => array(
			 'url' => 'http://www.google.com',
			 'parsed' => array( 'scheme' => 'http', 'host' => 'www.google.com', ),
		),
		'abspath'    => array(
			 'url' => '/path1/path2',
			 'parsed' => array( 'path' => '/path1/path2', ),
		),
		'noscheme'   => array(
			 'url' => '//example.com/path1/path2',
			 'parsed' => array( 'host' => 'example.com', 'path' => '/path1/path2', ),
		),
		'dot1'       => array(
			 'url' => '.',
			 'parsed' => array( 'path' => '.', ),
		),
		'dotdot2'    => array(
			 'url' => 'a/../../..',
			 'parsed' => array( 'path' => '../..', ),
			 'unparsed' => '../..',
		),
		'absdotdot3' => array(
			 'url' => '/a/../../..',
			 'parsed' => array( 'path' => '/', ),
			 'unparsed' => '/',
		),
		'merge_base'   => array(
			 'url' => 'http://a/b/c/d;p?q',
			 'parsed' => array( 'scheme' => 'http', 'host' => 'a', 'path' => '/b/c/d;p', 'query' => 'q' ),
		),
	);

	public $mergeTestSet = array(
//*///
		array(
			'refUrl' => "g:h",
			'expectUrl' => "g:h",
		),
		array(
			'refUrl' => "g",
			'expectUrl' => "http://a/b/c/g",
		),
		array(
			'refUrl' => "./g",
			'expectUrl' => "http://a/b/c/g",
		),
		array(
			'refUrl' => "g/",
			'expectUrl' => "http://a/b/c/g/",
		),
		array(
			'refUrl' => "/g",
			'expectUrl' => "http://a/g",
		),
		array(
			'refUrl' => "//g",
			'expectUrl' => "http://g",
		),
		array(
			'refUrl' => "?y",
			'expectUrl' => "http://a/b/c/d;p?y",
		),
		array(
			'refUrl' => "g?y",
			'expectUrl' => "http://a/b/c/g?y",
		),
//*///
		array(
			'refUrl' => "#s",
			'expectUrl' => "http://a/b/c/d;p?q#s",
		),
		array(
			'refUrl' => "g#s",
			'expectUrl' => "http://a/b/c/g#s",
		),
		array(
			'refUrl' => "g?y#s",
			'expectUrl' => "http://a/b/c/g?y#s",
		),
		array(
			'refUrl' => ";x",
			'expectUrl' => "http://a/b/c/;x",
		),
		array(
			'refUrl' => "g;x",
			'expectUrl' => "http://a/b/c/g;x",
		),
		array(
			'refUrl' => "g;x?y#s",
			'expectUrl' => "http://a/b/c/g;x?y#s",
		),
//*///
		array(
			'refUrl' => "",
			'expectUrl' => "http://a/b/c/d;p?q",
		),
//*///
		array(
			'refUrl' => ".",
			'expectUrl' => "http://a/b/c/",
		),
		array(
			'refUrl' => "./N/..",
			'expectUrl' => "http://a/b/c/",
		),
		array(
			'refUrl' => "./",
			'expectUrl' => "http://a/b/c/",
		),
		array(
			'refUrl' => "./..",
			'expectUrl' => "http://a/b/",
		),
		array(
			'refUrl' => "..",
			'expectUrl' => "http://a/b/",
		),
		array(
			'refUrl' => "../",
			'expectUrl' => "http://a/b/",
		),
		array(
			'refUrl' => "../g",
			'expectUrl' => "http://a/b/g",
		),
		array(
			'refUrl' => "../..",
			'expectUrl' => "http://a/",
		),
		array(
			'refUrl' => "../../",
			'expectUrl' => "http://a/",
		),
		array(
			'refUrl' => "../../g",
			'expectUrl' => "http://a/g",
		),
		array(
			'refUrl' => "/./g",
			'expectUrl' => "http://a/g",
		),
		array(
			'refUrl' => "/../g",
			'expectUrl' => "http://a/g",
		),
		array(
			'refUrl' => "g.",
			'expectUrl' => "http://a/b/c/g.",
		),
		array(
			'refUrl' => ".g",
			'expectUrl' => "http://a/b/c/.g",
		),
		array(
			'refUrl' => "g..",
			'expectUrl' => "http://a/b/c/g..",
		),
		array(
			'refUrl' => "..g",
			'expectUrl' => "http://a/b/c/..g",
		),
		array(
			'refUrl' => "./../g",
			'expectUrl' => "http://a/b/g",
		),
		array(
			'refUrl' => "./g/.",
			'expectUrl' => "http://a/b/c/g/",
		),
		array(
			'refUrl' => "g/./h",
			'expectUrl' => "http://a/b/c/g/h",
		),
		array(
			'refUrl' => "g/../h",
			'expectUrl' => "http://a/b/c/h",
		),
		array(
			'refUrl' => "g;x=1/./y",
			'expectUrl' => "http://a/b/c/g;x=1/y",
		),
		array(
			'refUrl' => "g;x=1/../y",
			'expectUrl' => "http://a/b/c/y",
		),
		array(
			'refUrl' => "g?y/./x",
			'expectUrl' => "http://a/b/c/g?y/./x",
		),
		array(
			'refUrl' => "g?y/../x",
			'expectUrl' => "http://a/b/c/g?y/../x",
		),
		array(
			'refUrl' => "g#s/./x",
			'expectUrl' => "http://a/b/c/g#s/./x",
		),
		array(
			'refUrl' => "g#s/../x",
			'expectUrl' => "http://a/b/c/g#s/../x",
		),
		array( // for backward compatibility
			'strict' => false,
			'refUrl' => "http:g",
			'expectUrl' => "http://a/b/c/g",
		),
		array( // for strict parsers
			'strict' => true,
			'refUrl' => "http:g",
			'expectUrl' => "http:g",
		),
//*///
	);

	protected function _run() {

		$this->_getopt();
		$this->_debug = isset( $this->_options['debug'] );
		if ( $this->_debug ) {
			$GLOBALS['gWeirdoDebug'] = 1;
		}
		$this->_init();

		foreach ( $this->parseTestSet as $name => &$item ) {

			// validate the basic URL parser
			if ( !WeirdoUrl::equalParsed( $item['weirdUrl']->getParsed(), $item['parsed'] ) ) {
				printf( "===== parse failure\n" );
				printf( " name: %s\n", $name );
				printf( "  url: %s\n", $item['url'] );
				printf( " got: " );
				var_dump( $item['weirdUrl']->getParsed() );
				printf( "expected: " );
				var_dump( $item['parsed'] );
			}

			// validate the unparser
			$urlRebuilt = WeirdoUrl::unparse( $item['weirdUrl']->getParsed() );
			$expectedRebuilt = isset( $item['unparsed'] )
				? $item['unparsed']
				: $item['url'];
			if ( $urlRebuilt !== $expectedRebuilt ) {
				printf( "===== unparse failure\n" );
				printf( " name: %s\n", $name );
				printf( " orig: \"%s\"\n", $item['url'] );
				printf( "built: \"%s\"\n", $urlRebuilt );
				var_dump( $item['parsed'] );
			}
		}

		// validate the merge functions (also tests path merge and dot removal)
		echo "===========================\n";
		printf( "merge_base=\n  \"%s\"\n", $this->parseTestSet['merge_base']['weirdUrl'] );

		foreach( $this->mergeTestSet as $t ) {
			// skip "strict" items, as we parse in compatibility mode
			if ( isset( $t['strict'] ) && $t['strict'] ) {
				continue;
			}
			// merge the test URL with the base
			$f = WeirdoUrl::mergeUrls(
					$t['refUrl'],
					$this->parseTestSet['merge_base']['parsed']
				);
			// get the text URL that results
			$m = WeirdoUrl::unparse( $f );
			printf( "%u %-12s =  %-23s %s\n", $m == $t['expectUrl'], "\"{$t['refUrl']}\"", '"' . WeirdoUrl::unparse( $f ) . '"', "\"{$t['expectUrl']}\"" );
			if ( $m !== $t['expectUrl'] ) {
				echo "FAIL ***\n";
			}
		}
	}

	private function _init() {
		// create a WeirdoUrl object for each parse test URL
		foreach ( $this->parseTestSet as $name => &$item ) {
			$item['weirdUrl'] = new WeirdoUrl( $item['url'] );
		}
	}

	/**
	 * Initialize this class's static properties.
	 * @private
	 *
	 * PHP only allows variable declarations with simple constants, so we have this
	 * function for more complex initialization of statics. Although "public" in
	 * construction, it is usable in this source file, only, immediately after this
	 * class is declared. Any attempt to invoke this method a second time will throw
	 * a WMException.
	 */
	public static function _initStatic() {
	}

	/** For semantics, see WeirdoCommandLineApp::$_optargs */
	protected $_optargs = null;

	/** For semantics, see WeirdoCommandLineApp::$_longopts */
	protected $_longopts = array( 'debug::' );

}
// Once-only static initialization
Weirdo_ut::_initStatic();

exit ( Weirdo_ut::run() );

/** @}*/

